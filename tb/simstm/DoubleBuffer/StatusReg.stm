-- ******************************************************************************
-- 
--                   /------o
--             eccelerators
--          o------/
-- 
--  This file is an Eccelerators GmbH sample project.
-- 
--  MIT License:
--  Copyright (c) 2023 Eccelerators GmbH
-- 
--  Permission is hereby granted, free of charge, to any person obtaining a copy
--  of this software and associated documentation files (the "Software"), to deal
--  in the Software without restriction, including without limitation the rights
--  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
--  copies of the Software, and to permit persons to whom the Software is
--  furnished to do so, subject to the following conditions:
-- 
--  The above copyright notice and this permission notice shall be included in all
--  copies or substantial portions of the Software.
-- 
--  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
--  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
--  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
--  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
--  SOFTWARE.
-- ******************************************************************************

    -- global
        -- var WaitTimeOut Test.stm
		-- var DoubleBufferBus from DoubleBuffer.stm
    -- parameter
    var StatusRegOperationMVal 0
    var StatusRegOperationMValToWaitFor 0
    var StatusRegHwBufferMVal 0
    var StatusRegHwBufferMValToWaitFor 0
    -- intern
    var StatusRegTmp0 0

getStatusRegOperationMVal:
proc
	bus read DoubleBufferBus 32 $StatusRegAddress StatusRegTmp0
	and StatusRegTmp0 $OperationMask
	equ StatusRegOperationMVal $StatusRegTmp0
end proc

getStatusRegHwBufferMVal:
proc
	bus read DoubleBufferBus 32 $StatusRegAddress StatusRegTmp0
	log message $INFO_3 "getStatusRegHwBufferMVal: {}" $StatusRegTmp0
	and StatusRegTmp0 $HwBufferMask
	log message $INFO_3 "getStatusRegHwBufferMValHwBufferMask: {}" $HwBufferMask
	log message $INFO_3 "getStatusRegHwBufferMValMasked: {}" $StatusRegTmp0
	equ StatusRegHwBufferMVal $StatusRegTmp0
end proc


waitForStatusRegOperationMVal:
proc
    loop $WaitTimeOut
        wait 1000
        call $getStatusRegOperationMVal          
        log message $INFO_3 "waitForStatusRegOperationMVal:" $StatusRegOperationMVal
        if $StatusRegOperationMVal = $StatusRegOperationMValToWaitFor
            return
        end if
    end loop
    log message $ERROR "waitForStatusRegOperationMVal: {} not set within reasonable time" $StatusRegOperationMVal
    abort
end proc

waitForStatusRegHwBufferMVal:
proc
    loop $WaitTimeOut
        wait 1000
        call $getStatusRegHwBufferMVal          
        log message $INFO_3 "waitForStatusRegHwBufferMVal:{}" $StatusRegHwBufferMVal
        if $StatusRegHwBufferMVal = $StatusRegHwBufferMValToWaitFor
            return
        end if
    end loop
    log message $ERROR "waitForStatusRegHwBufferMVal: {} not set within reasonable time" $StatusRegOperationMVal
    abort
end proc