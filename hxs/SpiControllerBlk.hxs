//******************************************************************************
//
//                  /------o
//            eccelerators
//         o------/
//
// This file is an Eccelerators GmbH sample project.
//
// MIT License:
// Copyright (c) 2023 Eccelerators GmbH
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//******************************************************************************
use Eccelerators.Library.Base.*;
namespace Eccelerators.Library.IP
{
	block SpiControllerBlk
	{
		Name = "Spi Controller Block";
		Description = "
			This block defines a basic SPI controller to connect general purpose peripheral SPI devices e.g.,
			analog to digital converters, digital to analog converters and IO-port extenders.

			Constraints:

			1. Spend a dual ported RAM vendor IP instance to hold controller specific commands, transmit data
			   and receive data.
			2. Partition the RAM into two equally sized **buffers**, each to hold one transmit command/data frame and a
			   corresponding receive data frame.
			3. Allow a continuous flow of data between SW and HW by indicating the availibilty/preparation of a buffer by semaphores.
			4. Provide commands to solve usual SPI transmit and receive tasks chained in a frame.
			5. Give the possibilty to adapt this basic Spi controller block by means of inheritance to e.g, different buffer sizes,
			   different packet lengths, repeating multipiers, dual or quad SPI-modes or to add interrupt capability.
			6. Allow to process buffer data repeatedly in background by HW and exchange buffers only when SW wants to pay attenetion.
			7. Allow to process intitally present data after reset autonomously by setting the reset values of respective
			   control bits and preloading the buffers with respective transmit commands and data.

			SW-operation flow:
			 
			.. figure:: resources/SwFlow.png
			   :scale: 9
			   
			   SW-operation flow
			 
			HW-operation flow:
			 
			.. figure:: resources/HwFlow.png
			   :scale: 8
			   
			   HW-operation flow
		 			 
			";
		BaseAddress = 0x0;
		Size = 0x800;
		Registers = [
			SpiControllerBlk.CellBuffer(Offset=0x000),
			DoubleBufferControllerBlk.ControlReg(Offset=0x400),
			DoubleBufferControllerBlk.StatusReg
		];
				
		delegate CellBuffer
		{
			Name = "Cell Buffer";
			Description = "Buffer memory to hold the cells of 4 bytes each of a controller frame.";
			Size = 0x400;
		}
	}
	
}