//******************************************************************************
//
//                  /------o
//            eccelerators
//         o------/
//
// This file is an Eccelerators GmbH sample project.
//
// MIT License:
// Copyright (c) 2023 Eccelerators GmbH
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//******************************************************************************
use Eccelerators.Library.Base.*;
namespace Eccelerators.Library.IP
{
    @Generator ('c.structures.register-type-union', 'T_Cell')
    @Generator ('c.structures.block-type-trailing-pad', 'skip')
	block SpiControllerBlk
	{
		Name = "Spi Controller Block";
		Description = "
			This block defines a basic SPI controller to connect general purpose peripheral SPI devices e.g.,
			analog to digital converters, digital to analog converters and IO-port extenders.

			Constraints:

			1. Spend a dual ported RAM vendor IP instance to hold controller specific commands, transmit data
			   and receive data.
			2. Partition the RAM into two equally sized **buffers**, each to hold one transmit command/data frame and a
			   corresponding receive data frame.
			3. Allow a continuous flow of data between SW and HW by indicating the availibilty/preparation of a buffer by semaphores.
			4. Provide commands to solve usual SPI transmit and receive tasks chained in a frame.
			5. Give the possibilty to adapt this basic Spi controller block by means of inheritance to e.g, different buffer sizes,
			   different packet lengths, repeating multipiers, dual or quad SPI-modes or to add interrupt capability.
			6. Allow to process buffer data repeatedly in background by HW and exchange buffers only when SW wants to pay attenetion.
			7. Allow to process intitally present data after reset autonomously by setting the reset values of respective
			   control bits and preloading the buffers with respective transmit commands and data.

			SW-operation flow:
			 
			.. figure:: resources/SwFlow.png
			   :scale: 9
			   
			   SW-operation flow
			 
			HW-operation flow:
			 
			.. figure:: resources/HwFlow.png
			   :scale: 8
			   
			   HW-operation flow
		 			 
			";
		BaseAddress = 0x0;
		Size = 0x800;
		Registers = [
			SpiControllerBlk.CellBuffer(Offset=0x000),
			SpiControllerBlk.CmdConfigCell(Offset=0x000),
			SpiControllerBlk.CmdSetCell(Offset=0x000),
			SpiControllerBlk.CmdTransmitCell(Offset=0x000),
			SpiControllerBlk.CmdTransceiveCell(Offset=0x000),
			SpiControllerBlk.CmdWaitCell(Offset=0x000),
			SpiControllerBlk.CmdGotoCell(Offset=0x000),
			SpiControllerBlk.CmdForLoopCell(Offset=0x000),
			SpiControllerBlk.CmdEndCell(Offset=0x000),
			SpiControllerBlk.TransmitDataCell(Offset=0x000),
			SpiControllerBlk.ReceiveDataCell(Offset=0x000),
			DoubleBufferControllerBlk.ControlReg(Offset=0x400),
			DoubleBufferControllerBlk.StatusReg
		];
		
		@Generator ('c.structures.presence', 'skip')
		delegate CellBuffer
		{
			Name = "Cell Buffer";
			Description = "Buffer memory to hold the cells of 4 bytes each of a controller frame.";
			Size = 0x400;
		}
		register CmdCell
		{
			Description = "
				Command cell, can be placed at each 4 byte aligned address in |.dlgCellBffr....|
				";
			Width = 32;
		}
		
		@Generator('vhdl.user-interface', 'skip')
		@Generator ('c.structures.register-type-union-member', 'T_Cell')
		@Generator ('c.structures.register-replace-by-array', 'T_Cell Cell[0x100]')
		register CmdConfigCell : CmdCell
		{
			Name = "Command Config Cell";
			Description = "
				Command cell, must be placed start of |.dlgCellBffr....|
				";
			Width = 32;
			Bits = [
				Reserved(Width=19),
				SpiControllerBlk.CmdConfigCell.ReceiveFrameStartAddress,
				SpiControllerBlk.CmdConfigCell.CmdConfigCellId
			];
			data ReceiveFrameStartAddress
			{
				Width = 9;
				Name = "Receive Frame Start Address";
				Description = "
					Sets the receive frame start byte address in a buffer,
					the lower 2 bits must be '0'.";
			}
			enum CmdConfigCellId
			{
				Width = 4;
				Values = [
					value ConfigCellId
					{
						Value = 0x0;
						Description = "Command to partiton a buffer.";
					}
				];
			}
		}
		
		@Generator('vhdl.user-interface', 'skip')
		@Generator ('c.structures.register-type-union-member', 'T_Cell')
		@Generator ('c.structures.presence', 'skip')
		register CmdSetCell : CmdCell
		{
			Name = "Command Set Cell";
			Width = 32;
			Bits = [
				Reserved(Width=12),
				SpiControllerBlk.CmdSetCell.ClkPeriod,
				SpiControllerBlk.CmdSetCell.ClkPhase,
				SpiControllerBlk.CmdSetCell.ClkPolarity,
				SpiControllerBlk.CmdSetCell.ChipSelect,
				SpiControllerBlk.CmdSetCell.CmdSetCellId
			];
			data ClkPeriod
			{
				Width = 10;
				Name = "Clock Period in ns";
			}	
			enum ClkPhase
			{
				Width = 1;
				Name = "Clock Phase(CPHA)";
				Values = [		
					value Second
					{
						Value = 0b1;
						Description = "Sample MiSo with second clock edge after chip select has been activated.";
					},		
					value First
					{
						Value = 0b0;
						Description = "Sample MiSo with first clock edge after chip select has been activated.";
					}
				];
			}			
			enum ClkPolarity
			{
				Width = 1;
				Name = "Clock Polarity(CPOL)";
				Values = [				
					value High
					{
						Value = 0b1;
						Description = "SCK is high when idle.";
					},
					value Low
					{
						Value = 0b0;
						Description = "SCK is low when idle.";
					}
				];
			}			
			data ChipSelect
			{
				Width = 4;
				Name = "Chip Select";
				Description = "Sets an active chip select, 15 = no Cs, 0 = Cs0, 1=Cs1, ... 14=Cs14";
			}	
			enum CmdSetCellId
			{
				Width = 4;
				Values = [
					value SetCellId
					{
						Value = 0x1;
						Description = "Command to set basic parameters for the following transfers.";
					}	
				];
			}
		}
		
		@Generator('vhdl.user-interface', 'skip')
		@Generator ('c.structures.register-type-union-member', 'T_Cell')
		@Generator ('c.structures.presence', 'skip')
		register CmdTransmitCell : CmdCell
		{
			Name = "Command Transmit Cell";
			Width = 32;
			Bits = [
				Reserved(Width=12),
				SpiControllerBlk.CmdTransmitCell.PacketLength,
				SpiControllerBlk.CmdTransmitCell.PacketMultiplier,
				SpiControllerBlk.CmdTransmitCell.CmdTransmitCellId
			];
			data PacketLength
			{
				Width = 8;
				Name = "Length of data packet in bytes";
			}
		
			data PacketMultiplier
			{
				Width = 8;
				Name = "Multiplier for repetition of the data packet, 0 = no data is sent, 1 = one time, n = n times";
			}
			enum CmdTransmitCellId
			{
				Width = 4;
				Values = [
					value TransmitCellId
					{
						Value = 0x2;
						Description = "Command to transmit the following data packet without recording receive data.";
					}
				];
			}
		}
		
		@Generator('vhdl.user-interface', 'skip')
		@Generator ('c.structures.register-type-union-member', 'T_Cell')
		@Generator ('c.structures.presence', 'skip')
		register CmdTransceiveCell : CmdCell
		{
			Name = "Command Tranceive Cell";
			Width = 32;
			Bits = [
				Reserved(Width=12),
				SpiControllerBlk.CmdTransmitCell.PacketLength,
				SpiControllerBlk.CmdTransmitCell.PacketMultiplier,
				SpiControllerBlk.CmdTransceiveCell.CmdTransceiveCellId
			];
			enum CmdTransceiveCellId
			{
				Width = 4;
				Values = [
					value TransceiveCellId
					{
						Value = 0x3;
						Description = "Command to transmit the following data packet and record receive data.";
					}
				];
			}
		}
		
		@Generator('vhdl.user-interface', 'skip')
		@Generator ('c.structures.register-type-union-member', 'T_Cell')
		@Generator ('c.structures.presence', 'skip')
		register CmdWaitCell : CmdCell
		{
			Name = "Command Wait Cell";
			Width = 32;
			Bits = [
				Reserved(Width=12),
				SpiControllerBlk.CmdWaitCell.WaitNs,
				SpiControllerBlk.CmdWaitCell.CmdWaitCellId
			];
			data WaitNs
			{
				Width = 16;
				Name = "Wait for a time in ns";
			}
			enum CmdWaitCellId
			{
				Width = 4;
				Values = [
					value WaitCellId
					{
						Value = 0x4;
						Description = "Command to wait for a time.";
					}						
				];
			}
		}
		
		@Generator('vhdl.user-interface', 'skip')
		@Generator ('c.structures.register-type-union-member', 'T_Cell')
		@Generator ('c.structures.presence', 'skip')
		register CmdGotoCell : CmdCell
		{
			Name = "Command Goto Cell";
			Width = 32;
			Bits = [
				Reserved(Width=19),
				SpiControllerBlk.CmdEndCell.AddressToGoto,
				SpiControllerBlk.CmdGotoCell.CmdGotoCellId
			];		

			enum CmdGotoCellId
			{
				Width = 4;
				Values = [
					value GotoCellId
					{
						Value = 0x5;
						Description = "Command to jump to another command at an address in a buffer.";
					}					
				];
			}
		}
		
		@Generator('vhdl.user-interface', 'skip')
		@Generator ('c.structures.register-type-union-member', 'T_Cell')
		@Generator ('c.structures.presence', 'skip')
		register CmdForLoopCell : CmdCell
		{
			Name = "Command For Loop Cell";
			Description = "
				When this command is executed it first checks if |.datForCnt....| is 0.
				 
				If it is not 0 it branches execution to the next immediately following command e.g. |.regCmdGoto....| in the frame and decrements
				the value in |.datForCnt....|.
				 
				Otherwise it branches execution to the after next command.
				";
			Width = 32;
			Bits = [
				Reserved(Width=20),
				SpiControllerBlk.CmdForLoopCell.ForLoopCount,
				SpiControllerBlk.CmdForLoopCell.CmdForLoopCellId
			];
			data ForLoopCount
			{
				Width = 8;
				Name = "For Loop Count";
				Description = "Number of times a for loop is run.";
			}	
			enum CmdForLoopCellId
			{
				Width = 4;
				Values = [
					value ForLoopCellId
					{
						Value = 0x5;
						Description = "Command to run a for loop.";
					}				
				];
			}
		}
		
		@Generator('vhdl.user-interface', 'skip')
		@Generator ('c.structures.register-type-union-member', 'T_Cell')
		@Generator ('c.structures.presence', 'skip')
		register CmdEndCell : CmdCell
		{
			Name = "Command End Cell";
			Width = 32;
			Bits = [
				Reserved(Width=18),
				SpiControllerBlk.CmdEndCell.AddressToGoto,
				SpiControllerBlk.CmdEndCell.AutoRestart,
				SpiControllerBlk.CmdEndCell.CmdEndCellId
			];
			data AddressToGoto
			{
				Width = 9;
				Name = "Address to Goto";
				Description = "
							Sets address to goto in a buffer,
							the lower 2 bits must be '0'.";
			}
			enum AutoRestart
			{
				Width = 1;
				Values = [
					value Restarting
					{
						Value = 0b1;
						Description = "
							Command end doesn't end HW processing of the current buffer but restarts at |.AddrToGt....| address, unless
				            a new buffer is prepared, then it switches to  the new buffer exactly at this place.";
					},
					
					value NotRestarting
					{
						Value = 0b0;
						Description = "Command end ends HW processing of the current buffer and waits for a new buffer.";
					}									
				];
			}				
			enum CmdEndCellId
			{
				Width = 4;
				Values = [
					value EndCellId
					{
						Value = 0x6;
						Description = "Command frame end.";
					}					
				];
			}		
		}
		
		@Generator('vhdl.user-interface', 'skip')
		@Generator ('c.structures.register-type-union-member', 'T_Cell')
		@Generator ('c.structures.presence', 'skip')
		register TransmitDataCell 
		{
			Name = "Transmit Data Cell";
			Description = "
				Transmit data bytes attached to preceeding |.regCmdTrm....| or |.regCmdTrcv....| cells.
				";
			Width = 32;
			Bits = [SpiControllerBlk.TransmitDataCell.TransmitData];
				data TransmitData
				{
					Description = "Transmit data bytes, 4 bytes, byte at lowest address sent first, bit 0 sent first.";
					Width = 32;
				}	
		}
		
		@Generator('vhdl.user-interface', 'skip')
		@Generator ('c.structures.register-type-union-member', 'T_Cell')
		@Generator ('c.structures.presence', 'skip')
		register ReceiveDataCell
		{
			Name = "Receive Data Cell";
			Description = "
				Received data bytes as requested by tranceive command and data sequences,
				starting at |.dlgCellBffr....| start address given by |.regCmdCfg....|.
				";
			Width = 32;
			Bits = [SpiControllerBlk.ReceiveDataCell.ReceiveData];	
			data ReceiveData
			{
				Description = "Receive data bytes, 4 bytes, byte at lowest address sent first, bit 0 sent first.";
				Width = 32;
			}
		}
		
//		object Link_Substitutions
//		{
//			Description = "			
//				.. |.Activation....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.ControlReg.Id»/bit:«DoubleBufferControllerBlk.ControlReg.Activation.Id»<###
//				.. |.Activated....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.ControlReg.Id»/bit:«DoubleBufferControllerBlk.ControlReg.Activation.Id»/val:«DoubleBufferControllerBlk.ControlReg.Activation.Activated.Id»<###
//				.. |.DeActivated....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.ControlReg.Id»/bit:«DoubleBufferControllerBlk.ControlReg.Activation.Id»/val:«DoubleBufferControllerBlk.ControlReg.Activation.DeActivated.Id»<###
//				 
//				.. |.SwBuffer....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.ControlReg.Id»/bit:«DoubleBufferControllerBlk.ControlReg.SwBuffer.Id»<###
//				.. |.Prepared....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.ControlReg.Id»/bit:«DoubleBufferControllerBlk.ControlReg.SwBuffer.Id»/val:«DoubleBufferControllerBlk.ControlReg.SwBuffer.Prepared.Id»<###
//
//				.. |.StatusReg....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.StatusReg.Id»<###
//				.. |.Operation....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.StatusReg.Id»/bit:«DoubleBufferControllerBlk.StatusReg.HwBuffer.Id»<###
//				.. |.Off....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.StatusReg.Id»/bit:«DoubleBufferControllerBlk.StatusReg.Operation.Id»/val:«DoubleBufferControllerBlk.StatusReg.Operation.Off.Id»<###
//				.. |.Idle....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.StatusReg.Id»/bit:«DoubleBufferControllerBlk.StatusReg.Operation.Id»/val:«DoubleBufferControllerBlk.StatusReg.Operation.Idle.Id»<###
//				.. |.Busy....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.StatusReg.Id»/bit:«DoubleBufferControllerBlk.StatusReg.Operation.Id»/val:«DoubleBufferControllerBlk.StatusReg.Operation.Busy.Id»<###
//				 
//				.. |.HwBuffer....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.StatusReg.Id»/bit:«DoubleBufferControllerBlk.StatusReg.HwBuffer.Id»<###
//				.. |.Available....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.StatusReg.Id»/bit:«DoubleBufferControllerBlk.StatusReg.HwBuffer.Id»/val:«DoubleBufferControllerBlk.StatusReg.HwBuffer.Available.Id»<###
//				.. |.UnAvailable....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«DoubleBufferControllerBlk.StatusReg.Id»/bit:«DoubleBufferControllerBlk.StatusReg.HwBuffer.Id»/val:«DoubleBufferControllerBlk.StatusReg.HwBuffer.UnAvailable.Id»<###			 				 
//
//				.. |.dlgCellBffr....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«SpiControllerBlk.CellBuffer.Id»<###
//				.. |.regCmdCfg....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«SpiControllerBlk.CmdConfigCell.Id»<###
//				.. |.regCmdTrm....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«SpiControllerBlk.CmdTransmitCell.Id»<###
//				.. |.regCmdTrcv....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«SpiControllerBlk.CmdTransceiveCell.Id»<###
//				.. |.regCmdGoto....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«SpiControllerBlk.CmdGotoCell.Id»<###
//				.. |.datForCnt....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«SpiControllerBlk.CmdForLoopCell.Id»/bit:«SpiControllerBlk.CmdForLoopCell.ForLoopCount.Id»<###
//
//				.. |.AddrToGt....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«SpiControllerBlk.CmdEndCell.Id»/bit:«SpiControllerBlk.CmdEndCell.AddressToGoto.Id»<###	
//				.. |.AutRstrt....| replace:: ###>ifc:«SpiControllerIfc.Id»/blk:«SpiControllerBlk.Id»/fld:«SpiControllerBlk.CmdEndCell.Id»/bit:«SpiControllerBlk.CmdEndCell.AutoRestart.Id»<###
//			";
//		}
	}
	

}